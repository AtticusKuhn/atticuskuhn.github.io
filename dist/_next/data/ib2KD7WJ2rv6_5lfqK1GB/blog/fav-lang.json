{"pageProps":{"blog":{"content":"\n\nWith so many different programming languages and technologies available today, it can sometimes be confusing on which to choose for a new project. If I were given the choice, these are my top 4 favourite languages that I would use. \n\n\n\n# 4 Python\nI really like the syntax of python. The fact that it is indentation based and I don't have to deal with brackets makes the code look nice.\n\n\n# 3  PHP\nPHP is the kind of language which gets things done. I have always been interested in web development, and since PHP focuses almost exclusively on web development, I use it sometimes.\n\n\n# 2  Javascript\nAbove PHP, javascript is truly the language of the web. It is the only language to write  a full-stack application because it works on the front end and the back end.  From React to Node.js, there are many libraries, tools, and frameworks for Javascript. The extraordinary tooling makes it possible to do anything in javascript, and one will never have to switch languages if one chooses it.\n\n\n# 1  Haskell\nHaskell is my all time favourite language. It is type-safe and entirely functional. By learning Haskell, I have changed the way I think about programming. Haskell forces the programmer to learn about types and side effects in a way which no other language does. I will always try to use Haskell if I can in any context.\n","date":"April 12, 2021","tags":["python"," PHP"," javascript"," go"," java"," haskell"],"title":"My favourite Programming languages","slug":"fav-lang","description":"Programming languages are like tools, so you need the right tool for the job","image":"/images/php.png"},"reccomendedBlog":[{"content":"\n\nMany people mock Javascript for being bad. Go on any programming forum and you will find countless jokes at the expense of Javascript, but I argue that many of the things people hate most about Javascript were necessary for it to survive.\nWhy is Javascript perceived as bad?\nTo see why this is the case let us first look at the most maligned aspects of Javascript. When I ask people why they hate Javascript, they will say something along the lines of \nweak typing\n\n\n# general weirdness\nI find many of the criticisms of javascript are \"why doesn't this language stop me from shooting myself in the foot\". These are certainly desirable traits, and they are certainly being remedied in modern times with strict mode in ES6 and typescript. \nThe History of Javascript \nLooking at the history of Javascript reveals why it must have been this way. It was invented by Brendan Eich in 10 days in 1995, when the web was nothing like it is today.  Just imagine how different the web is by looking at a website from 1995 and comparing it to any modern website. Eich, and indeed nobody, could have imagined how the web could have evolved, so planning for the web to change drastically was needed.\n\n# Opinionated vs Flexible\nThe core of my argument is that people want Javascript to be opinionated and strict, when, due to the complex and evolving nature of the web, it is necessary that javascript be flexible and weak. Let's say Javascript took a hard stand and became inflexible on an issue pertaining to the 90s. We today would find that anachronistic and annoying. No central authority can predict how a programming language can be used, so it's better to leave all tools available to the programmer instead of walling off some features for fear that they might be mishandled. \n","date":"May 26, 2021","tags":["javascript"," web"," web programming"],"title":"Javascript Being Bad is why it's Good","slug":"javascript-bad","description":"People malign javascript for all the wrong reasons","image":"/images/techs/javascript.png"},{"content":"\n\nSince haskell is a list-based language, there are many ways to work with lists. This article details some of the most interesting ways to multiply each number in a list by 5. \n1. The Imperative way\n```haskell,\nmain:: IO()\nmain = do\n  mutable <- M.replicate 256 1\n  forM_ ([1..256] z->\n    modify mutable (x->x*5) z\n   )\n```\n2. The boring way\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs = map (\\x->x*5) xs\n```\n3. currying\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList = map (*5) \n```\n4. monad\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs =  xs >>= (\\x -> [x*5])\n```\n5. short functor\n```haskell,\nm=(<$>)(*5)\n```\n6. List comprehension\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs = [x*5 | x <- xs]\n```\n\n\n7. Do notation\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs = do\n    x <- xs\n    return $ x*5\n```\n\n8. Functor\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs = fmap (\\x -> x*5) xs\n```\n9. Applicative\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs =  pure (\\x->x*5) <*> xs\n```\n10. Recursion\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList [] = []\nmultiplyList (x:xs) = (x*5) : multiplyList xs\n```\n\n\n\n\n\n","date":"May 2, 2021","tags":["haskell"," list"," map"," functor"],"title":"10 ways to map a list in haskell","slug":"10-ways-to-map-a-list","description":"Haskell is such a cool language","image":"/images/techs/haskell.png"},{"content":"\nIn recent years, we've seen a lot of hype around machine learning. From [alpha go](https://deepmind.com/research/case-studies/alphago-the-story-so-far), which beat world-champion go\nplayers, to [GPT-3](https://en.wikipedia.org/wiki/GPT-3), the constant news buzz\nwould make one think we are around the corner from [AI Dominance](https://en.wikipedia.org/wiki/Technological_singularity). But I claim today that most of AI is just hype, with no\nreal substance behind it. Of course time will tell the true use of AI. In fact, most\ntimes teams eagerly throw a [neural net](https://en.wikipedia.org/wiki/Neural_network) at\na problem, they are really looking for a symbolic manipulation tool like [prolog](https://en.wikipedia.org/wiki/Prolog).\n\n# Black Boxes\n\nThe first drawback of machine learning is they are incomprehensible. If a machine learning model\nmakes a mistake, how will you figure out what went wrong? There is no real way of knowing. Sure,\nyou can look at the internal state of the model, but what does that really tell you?\nModels today are getting so large that it is impossible to hold a single one in your\nbrain. GPT-3 has [175 billion parameters](https://www.springboard.com/blog/data-science/machine-learning-gpt-3-open-ai/#:~:text=The%20largest%20version%20GPT%2D3,and%203.2%20M%20batch%20size.&text=Shown%20in%20the%20figure%20above,that%20it%20is%20quite%20larger.)\nparameters. What if it makes a mistake? Will some engineer have to go through all\n175 billion parameters just to find it? I think the true solution is [declarative](https://en.wikipedia.org/wiki/Declarative_programming) software\nthat simply states rules or definitions. That code is easier to debug and understand for\nnew users. In essence, we can only look at machine learning as a black box.\n\n# Changing Requirements\n\nOften in software engineering, projects are subject to [changing requirements](https://rebelsguidetopm.com/help-the-requirements-keep-changing-and-i-cant-nail-them-down-part-2/).\nWhat happens when this is done to a machine learning model? In short, I don't\nsee how a machine learning model trained for one task can be fixed to work on\na slightly different task. It would require a whole new retraining of the model\nevery time you want to make a change. Google even spoke about this issue in their\npaper [Machine Learning:\nThe High-Interest Credit Card of Technical Debt](https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43146.pdf). In our ever-changing world, you must truly\nconsider if you want to use a technology that requires so much effort even to change\nits purpose slightly.\n\n# Declarative Programming: is it Nirvana?\n\nI am a huge fan of declarative programming, whether from the [Wolfram Language](https://en.wikipedia.org/wiki/Wolfram_Language) or from [Prolog](https://en.wikipedia.org/wiki/Prolog).\nIn such a style, the programmer simply states the rules of the system formally, and\nthe language takes care of implementation concerns. This approach is easy to understand\nbecause it is just the rules of the system. In addition, it is easy to understand\nthe behavoir of a program: just follow which rules it applied.  If you have never\nheard of prolog, I strongly encourage you to check it out. It is unlike any other\nprogramming language, not part of the C or ALGOL lineage. It will rethink the way\nthat you understand the purpose of computers, [so try it out](https://swish.swi-prolog.org/).","date":"January 27, 2022","tags":["machine learning"," ml"," AI"],"title":"Machine Learning is overrated","slug":"machine-learning-overrated","description":"I don't understand the hype around machine learning","image":"/images/Blog-Images-Forget-Machine-Learning-Humans-Still-Have-a-Lot-to-Learn-Part-II.jpg"}]},"__N_SSG":true}