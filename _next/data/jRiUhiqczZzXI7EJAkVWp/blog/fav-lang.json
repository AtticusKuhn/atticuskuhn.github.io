{"pageProps":{"blog":{"content":"\n\nWith so many different programming languages and technologies available today, it can sometimes be confusing on which to choose for a new project. If I were given the choice, these are my top 4 favourite languages that I would use. \n\n\n\n# 4 Python\nI really like the syntax of python. The fact that it is indentation based and I don't have to deal with brackets makes the code look nice.\n\n\n# 3  PHP\nPHP is the kind of language which gets things done. I have always been interested in web development, and since PHP focuses almost exclusively on web development, I use it sometimes.\n\n\n# 2  Javascript\nAbove PHP, javascript is truly the language of the web. It is the only language to write  a full-stack application because it works on the front end and the back end.  From React to Node.js, there are many libraries, tools, and frameworks for Javascript. The extraordinary tooling makes it possible to do anything in javascript, and one will never have to switch languages if one chooses it.\n\n\n# 1  Haskell\nHaskell is my all time favourite language. It is type-safe and entirely functional. By learning Haskell, I have changed the way I think about programming. Haskell forces the programmer to learn about types and side effects in a way which no other language does. I will always try to use Haskell if I can in any context.\n","date":"April 12, 2021","tags":["python"," PHP"," javascript"," go"," java"," haskell"],"title":"My favourite Programming languages","slug":"fav-lang","description":"Programming languages are like tools, so you need the right tool for the job","image":"/images/php.png"},"reccomendedBlog":[{"content":"\n\nComplex analysis might just be my favorite field of mathematics. It is a field steeped in\nelegance, and it makes it apparent that calculus was always supposed to be done on the complex numbers. \n\n\nYou must be stupid to think that real analysis is better than complex\nanalysis. In real analysis, functions can be not differentiable, but in complex analysis,\nif a function is once-differentiable, it is infinitely differentiable. Also, if you know\na complex function on an interval, you know it for all numbers.\n\nContour integral\n\n\n\n\n\n\n\n","date":"Jan 20, 2022","tags":["complex analysis"," math"," calculus"],"title":"Complex Analysis is Super Cool","slug":"complex-analysis","description":"it's my favorite field of mathematics","image":"/images/complex-analysis.png"},{"content":"\nIn recent years, we've seen a lot of hype around machine learning. From [alpha go](https://deepmind.com/research/case-studies/alphago-the-story-so-far), which beat world-champion go\nplayers, to","date":"January 27, 2022","tags":["machine learning"," ml"," AI"],"title":"Machine Learning is overrated","slug":"machine-learning-overrated","description":"I don't understand the hype around machine learning","image":"/images/Blog-Images-Forget-Machine-Learning-Humans-Still-Have-a-Lot-to-Learn-Part-II.jpg"},{"content":"\n\nSince haskell is a list-based language, there are many ways to work with lists. This article details some of the most interesting ways to multiply each number in a list by 5. \n1. The Imperative way\n```haskell,\nmain:: IO()\nmain = do\n  mutable <- M.replicate 256 1\n  forM_ ([1..256] z->\n    modify mutable (x->x*5) z\n   )\n```\n2. The boring way\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs = map (\\x->x*5) xs\n```\n3. currying\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList = map (*5) \n```\n4. monad\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs =  xs >>= (\\x -> [x*5])\n```\n5. short functor\n```haskell,\nm=(<$>)(*5)\n```\n6. List comprehension\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs = [x*5 | x <- xs]\n```\n\n\n7. Do notation\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs = do\n    x <- xs\n    return $ x*5\n```\n\n8. Functor\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs = fmap (\\x -> x*5) xs\n```\n9. Applicative\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs =  pure (\\x->x*5) <*> xs\n```\n10. Recursion\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList [] = []\nmultiplyList (x:xs) = (x*5) : multiplyList xs\n```\n\n\n\n\n\n","date":"May 2, 2021","tags":["haskell"," list"," map"," functor"],"title":"10 ways to map a list in haskell","slug":"10-ways-to-map-a-list","description":"Haskell is such a cool language","image":"/images/techs/haskell.png"}]},"__N_SSG":true}