{"pageProps":{"blog":{"content":"\nIn recent years, we've seen a lot of hype around machine learning. From [alpha go](https://deepmind.com/research/case-studies/alphago-the-story-so-far), which beat world-champion go\nplayers, to [GPT-3](https://en.wikipedia.org/wiki/GPT-3), the constant news buzz\nwould make one think we are around the corner from [AI Dominance](https://en.wikipedia.org/wiki/Technological_singularity). But I claim today that most of AI is just hype, with no\nreal substance behind it. Of course time will tell the true use of AI. In fact, most\ntimes teams eagerly throw a [neural net](https://en.wikipedia.org/wiki/Neural_network) at\na problem, they are really looking for a symbolic manipulation tool like [prolog](https://en.wikipedia.org/wiki/Prolog).\n\n# Black Boxes\n\nThe first drawback of machine learning is they are incomprehensible. If a machine learning model\nmakes a mistake, how will you figure out what went wrong? There is no real way of knowing. Sure,\nyou can look at the internal state of the model, but what does that really tell you?\nModels today are getting so large that it is impossible to hold a single one in your\nbrain. GPT-3 has [175 billion parameters](https://www.springboard.com/blog/data-science/machine-learning-gpt-3-open-ai/#:~:text=The%20largest%20version%20GPT%2D3,and%203.2%20M%20batch%20size.&text=Shown%20in%20the%20figure%20above,that%20it%20is%20quite%20larger.)\nparameters. What if it makes a mistake? Will some engineer have to go through all\n175 billion parameters just to find it? I think the true solution is [declarative](https://en.wikipedia.org/wiki/Declarative_programming) software\nthat simply states rules or definitions. That code is easier to debug and understand for\nnew users. In essence, we can only look at machine learning as a black box.\n\n# Changing Requirements\n\nOften in software engineering, projects are subject to [changing requirements](https://rebelsguidetopm.com/help-the-requirements-keep-changing-and-i-cant-nail-them-down-part-2/).\nWhat happens when this is done to a machine learning model? In short, I don't\nsee how a machine learning model trained for one task can be fixed to work on\na slightly different task. It would require a whole new retraining of the model\nevery time you want to make a change. Google even spoke about this issue in their\npaper [Machine Learning:\nThe High-Interest Credit Card of Technical Debt](https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43146.pdf). In our ever-changing world, you must truly\nconsider if you want to use a technology that requires so much effort even to change\nits purpose slightly.\n\n# Declarative Programming: is it Nirvana?\n\nI am a huge fan of declarative programming, whether from the [Wolfram Language](https://en.wikipedia.org/wiki/Wolfram_Language) or from [Prolog](https://en.wikipedia.org/wiki/Prolog).\nIn such a style, the programmer simply states the rules of the system formally, and\nthe language takes care of implementation concerns. This approach is easy to understand\nbecause it is just the rules of the system. In addition, it is easy to understand\nthe behavoir of a program: just follow which rules it applied.  If you have never\nheard of prolog, I strongly encourage you to check it out. It is unlike any other\nprogramming language, not part of the C or ALGOL lineage. It will rethink the way\nthat you understand the purpose of computers, [so try it out](https://swish.swi-prolog.org/).","date":"January 27, 2022","tags":["machine learning"," ml"," AI"],"title":"Machine Learning is overrated","slug":"machine-learning-overrated","description":"I don't understand the hype around machine learning","image":"/images/Blog-Images-Forget-Machine-Learning-Humans-Still-Have-a-Lot-to-Learn-Part-II.jpg"},"reccomendedBlog":[{"content":"\n\n\n# What is an RSS Feed\n\nRSS is a standard by which you may subscribe to the content of other websites, and recieve updates about the news on other websites in a \nstandardized way so that many programs can read and understand the infromation. RSS uses XML in order to communicate in a way\nthat can be easily parsed by other tools and applications.\n\n# RSS increases freedom and independence\n\nMy main promotion of RSS is a philosophical and ideological reason: RSS feeds increse freedom, independence, and decentralization on the internet.\nToo often, the web has been centralized under the lock-and-key of a few gatekeepers (to name them: Google, Meta, Apple, Microsoft).\nAt the click of their fingers, and for whatever whim, as arbitrary as they desire, your subscriptions would be deleted without\nany trace or recourse.\n\nRSS feeds put the responsability in the hands of small website owners and blogs: because the standard is so simple, anyone\ncan implement and use it without the approval of those lords of the internet.\n\n# How to Find RSS Feeds\n\nUnfortunately for my idealistic ambitions, it seems that it is rare to find RSS feeds for the websites and information that I want.\n\nWhat I usually do is open the devtools and search for \"rss\" or \"atom\" in the HTML.\n\n\n## Tools for RSS\n\nIf my techniques don't work, sometimes there are tools out there to help you get an rss feed from a website.\n\nOne example is [Kill the Newsletter!](https://kill-the-newsletter.com/), which allows you to turn an email list into an\nRSS feed.\n\n\n\n# My RSS Config\n\nFor Edifying purposes, I will share my RSS configuration for others who want to take the first step into the world of RSS.\nI use a program called [elfeed](https://github.com/skeeto/elfeed) as an RSS reader. Here is my configuration for elfeed.\n\n```emacs-lisp\n(setq elfeed-feeds\n      '(\n        (\"https://www.unison-lang.org/feed.xml\" unison programming-language)\n        (\"http://arxiv.org/rss/cs.LO\" logic)\n        (\"http://arxiv.org/rss/cs.MS\" math)\n        (\"http://arxiv.org/rss/cs.PL\" programming-language)\n        (\"http://arxiv.org/rss/math.CT\" category-theory)\n        (\"https://reddit.com/r/emacs.rss\" emacs)\n        (\"https://reddit.com/r/orgmode.rss\" emacs org-mode)\n        (\"https://reddit.com/r/nixOS.rss\" nix linux)\n        (\"https://golem.ph.utexas.edu/category/atom10.xml\" category-theory)\n        (\"https://hnrss.org/newest?points=20\")\n        (\"https://lukesmith.xyz/index.xml\")\n        (\"https://nyxt.atlas.engineer/feed\")\n        (\"https://homotopytypetheory.org/feed/\" homotopy-type-theory)\n        (\"https://math.andrej.com/feed.xml\")\n        (\"https://existentialtype.wordpress.com/feed/\" type-theory)\n        (\"https://blog.thjread.com/rss.xml\")\n        (\"https://nitter.unixfox.eu/conal/rss\")\n        (\"https://www.youtube.com/feeds/videos.xml?channel_id=UCS4FAVeYW_IaZqAbqhlvxlA\" programming-language)\n        (\"https://www.youtube.com/feeds/videos.xml?channel_id=UC1kBxkk2bcG78YBX7LMl9pQ\" programming-language)\n        (\"https://www.youtube.com/feeds/videos.xml?channel_id=UC-9jDbJ-HegCFuWuam1SfvQ\" programming-language)\n        (\"https://www.youtube.com/feeds/videos.xml?channel_id=UCFFeNyzCEQDS4KCecugmotg\" programming-language)\n        (\"https://hnrss.org/newest?q=linux&points=20\" linux)\n        (\"https://hnrss.org/newest?q=type%20theory\" type-theory)\n        (\"https://hnrss.org/newest?q=category%20theory\" category-theory)\n        (\"https://nixos.org/blog/announcements-rss.xml\" nix linux)\n        (\"https://github.com/AtticusKuhn.private.atom\")\n        (\"https://feeds.buzzsprout.com/728558.rss\" type-theory)\n        (\"https://blog.wolfram.com/feed/\" wolfram programming-language)\n        (\"https://www.google.com/alerts/feeds/04747069146194916248/458592335938245591\" type-theory)\n        (\"https://www.google.com/alerts/feeds/04747069146194916248/4667516096121066180\" category-theory)\n        (\"https://www.google.com/alerts/feeds/04747069146194916248/7476438073175009204\" homotopy-type-theory)\n        (\"https://nitter.unixfox.eu/ttforall/rss\" type-theory)\n        (\"https://nitter.unixfox.eu/typetheorypcast/rss\" type-theory)\n        (\"https://nitter.unixfox.eu/SydneyTypes/rss\" type-theory)\n        (\"https://nitter.unixfox.eu/type_theory/with_replies/rss\" type-theory)\n        (\"https://twitter.com/Jose_A_Alonso/with_replies\" math type-theory)\n        (\"https://nitter.unixfox.eu/LogicPractice/rss\" logic)\n        (\"https://www.johndcook.com/blog/feed/\")\n        (\"https://systemcrafters.net/rss/\" emacs)\n        (\"https://emacstil.com/feed.xml\" emacs)\n        (\"https://d12frosted.io/atom.xml\" emacs)\n        ))\n```\n\n# My RSS Feed\n\nNow that you are convinced of the benefits of using RSS, now would be a good time to mention that I have my own RSS feed. You can access my\nRSS feed at [/rss.xml](/rss.xml)\n","date":"August 8, 2023","tags":["RSS"," free software"],"title":"Why RSS Feeds are the Superior way to Stay Up-to-Date","slug":"rss","description":"I just started using an RSS feed","image":"/images/rss.jpg"},{"content":"\nSandeep Srinivasan is a veteran of the machine learning industry. While most have gravitated towards it since the hype of the late 2000s, Srinivasan claims he has been “interested in machine learning since the 1990s,” almost noachian in this quickly evolving field. Today, I sat down with Srinivasan in order to glean what insights he has after pioneering this industry for 30 years. \n\nI am struck by Srinivasan’s positive attitude. He himself concurs, saying its necessary to be “a lifelong learner” to succeed in this field. Even with his experience, he is “still taking courses” to learn new skills and improve himself. His optimism extends further, however. When describing how he first got into machine learning, Srinivasan said a professor was too embarrassed that no one signed up for his course in machine learning, so he paid Srinivasan $10 an hour to be the only attendant. Despite being happenstance, Srinivasan tells the story with a smile as if it is a good joke. He brings this sense of optimism to his work, summarizing that the “best part of [his] job” is to meet bright 20-year-olds who have a “beginner’s mindset” and are eager to learn. \n\nFinding these bright 20-year-olds is becoming increasingly difficult for Srinivasan, unfortunately. In this white-hot field, he must muscle his way through the likes of “Google, Facebook, Amazon, and Apple.” Due to this drive for talent, Srinivasan complains that “the hardest part” of his job is hiring for his small machine learning startup.\n\nDespite his recruiting woes, Srinivasan claims he is not deterred about founding a small machine learning startup. He says the experience has been rewarding for him. When speaking on the advantages of founding a startup, he says he gets to “eat [his] own dog food,” in the sense that he is excited to try out all the products as a consumer that he is inventing. He emphasize that a founder must act as the first customer of a product, because if the founder doesn’t believe in the product, then neither will the clients. \n\nThe main area where Srinivasan eagerly gets to try out his new inventions is with his products aiming to “simplify machine learning.” He uses his own online dashboard to set up machine learning models in a few clicks, and soon he hopes others can do the same. His mission is to “democratize machine learning for multiple applications.”  In the future, Srinivasan imagines that doctors or other domain experts could create machine learning models without coding and without technical knowledge. \n\t\nDoctors are not the only profession Srinivasan predicts machine learning will impact. He thinks that many “repetitive tasks” such as “data entry” for taxes will disappear. In addition, manual tasks, such as image labeling will be automated away by machine learning.\n\nOverall, I am very impressed with Srinivasan’s accomplishments. He certainly has the air of someone well-informed on the industry, and he was able to use his knowledge to give me personal advice for the job market (“learn statistics”). Given how he effuses knowledge in every aspect of machine learning, I would not be surprised if his startup goes far. This experience was very informative for me, and I see myself possibly having a career in machine learning. I suggest to the reader to conduct a similar informational interview, in the hopes that one could learn about an intriguing field from a personality. \n\n\n \n","date":"Feb 27, 2022","tags":["machine learning"," interview"," coding"],"title":"Interview with Machine Learning Expert","slug":"sandeep-interview","description":"After his 30 years in the field, machine learning engineer Sandeep Srinivasan offers advice on how to tackle this complex career.","image":"/images/sandeep.jpg"},{"content":"\n\n\n# Boolean Considered Harmful\n\nI make the claim that using the boolean type (called \"Boolean\")\nis always a bad design decesion. This is because `Boolean` is\nlike the rind of an orange that has been squeezed out. The rind\ntestifies that there once was an orange here, but the juicy goodness\nof the orange is long gone.\n\nIt is the same with `Boolean`. If you are using `Boolean`, there was\nonce a function which returned more information, but this helpful information\nwas thrown away when all the information was squashed down into only 2 states.\n\nMy recommendation is that for any time you are tempted to write \"Boolean\", consider\nwhat information the function is actually computing.\n\nTo illustrate my point more, I will code the equality function on natural numbers in\n[Agda](https://en.wikipedia.org/wiki/Agda_(programming_language)). For any natural numbers `x` and `y`, `x == y` returns `true` if `x` is equal\nto `y` and false otherwise. I will then contrast this function against `x ==? y`, which I claim\nis a better function.\n\nDo not worry if you do not know [Agda](https://en.wikipedia.org/wiki/Agda_(programming_language)), because\nI will be explaining the code at every step.\n\n\n# Standard Library Functions\n\nFirst, I will defining some standard functions.\nThese functions are all in the [standard library of Agda](https://agda.github.io/agda-stdlib/),\nso this section is a learning exercise where I will be thouroughly explaining the purpose of all\nthe code.\n\n## Peano Numbers\n\nWe will represent natural numbers as [Peano Numbers](https://en.wikipedia.org/wiki/Peano_axioms), which means\nthat every natural number is either `0` or `successor(n)` for some natural number `n`. In Agda, we would\nrepresent the natural numbers as this data type:\n\n```agda\ndata NaturalNumber : Set where\n  zero : NaturalNumber\n  successor : NaturalNumber → NaturalNumber\nvariable\n  m n : NaturalNumber\n```\n## Booleans\n\nWe can then define the much-dreaded `Boolean`, which is either `true` or `false`.\n\n```agda\ndata Boolean : Set where\n  true : Boolean\n  false : Boolean\n```\n## Booleanean (Bad) Equality\n\nIn our first attempt to define equality on natural numbers, we use a `Boolean` to represent the result:\n`true` if the two numbers are equal and `false` if the two numbers are not equal.\n\n```agda\ninfixr 5 _==_\n_==_ : NaturalNumber → NaturalNumber → Boolean\nzero == zero = true\nsuccessor a == zero = false\nzero == successor b = false\nsuccessor a == successor b = a == b\n```\n\n## Propositional Equality\n\nTo begin to define our better equality, we first need a specification of equality.\nSome beginners are confused by propositional equality because propositional equality\ndoes not *compute* if two values are equal, but rather it gives the type of all *proofs*\nthat they are equal.\n\n```agda\ninfixr 5 _≡_\ndata _≡_  {A : Set o} :  A → A →  Set (lsuc o) where\n  reflexivity : {a : A} →  a ≡ a\n```\n\nSo, for example, `a ≡ b` is the type of all proofs that `a` is equal to `b`.\n\n## Empty Type\n\nThe empty type is inhabited by no values. The empty type represents the false proposition, or the proposition\nwith no proofs.\n\n```agda\ndata empty : Set where\n```\n\n## Decidability\n\nWith these pieces, we can define `decidability`. A proposition\nis [decidable](https://en.wikipedia.org/wiki/Decidability_(logic)) if there exists an\nalgorithm for deciding if the proposition is inhabited.\nThe `decides A` type will either produce evidence that `A` is inhabited, or\nproduce evidence that `A` in uninhabited.\n\n```agda\ndata decides (A : Set o) : Set o where\n  trueBecauseOf : A → decides A\n  falseBecauseOf : (A → empty) → decides A\n```\n\nA simple utility function which proves that `successor` is\nan [injective function](https://en.wikipedia.org/wiki/Injective_function).\n\n```agda\nsuccessorInjective : successor m ≡ successor n → m ≡ n\nsuccessorInjective reflexivity = reflexivity\n```\n\nGiven the type `decides`, we can say what it means for a [binary function](https://en.wikipedia.org/wiki/Binary_operation)\nto be decidable: for all its inputs, we can produce evidence of the type\nbeing inhabited or uninhabited.\n\n```agda\ndecidable2 : {A B : Set o} →  (A → B → Set ℓ) → Set (o ⊔ ℓ)\ndecidable2 {A = A} {B = B} f = (a : A) (b : B) → decides (f a b)\n```\n\n# The Improved Natural Number Equality\n\nWe will now define the improved equality function on natural numbers:\n\n```agda\ninfixr 5 _==?_\n_==?_ : decidable2 {A = NaturalNumber}  (_≡_)\nzero ==? zero = trueBecauseOf reflexivity\nzero ==? successor y = falseBecauseOf λ ()\nsuccessor x ==? zero = falseBecauseOf λ ()\nsuccessor x ==? successor y with (x ==? y)\n... | trueBecauseOf reflexivity = trueBecauseOf reflexivity\n... | falseBecauseOf x≢y = falseBecauseOf  (λ z → x≢y (successorInjective z))\n```\n\n# Why the Deciding Verison is Better\n\nYou might be wondering: \"why is `x ==? y` better than `x == y`\". In short, it is because\n`x ==? y` has a specification, but `x == y` does not.\n\nWhat's more, for all inputs, `x ==? y` returns evidence that it is correct, whereas we have not even\nstated the correctness specification for `x == y`.\n\nYou should always assume that everything is wrong until you have a formal proof that it is correct.\n\nAny function with the type signature `decidable2 {A = NaturalNumber}  (_≡_)` *must* be correct. By\nusing a more expressive type, we have ensured correctness automatically.  Others have said\n[\"make illegal states unrepresentable\"](https://fsharpforfunandprofit.com/posts/designing-with-types-making-illegal-states-unrepresentable/)\nbut I say, \"make incorrect code unwritable\".\nWrite a specification so that the only option is for your code to be correct.\n\nWith the pedestrian `x == y`, it would be easy to write a function with the same type signature that,\nin fact, would be incorrect.\n\nThe main concern in software is proofs of correctness. Every other aspect of code (including performance)\nis secondary. To learn more about this, look at [this talk](https://github.com/conal/talk-2023-galilean-revolution).\n\nFor these reasons, I strongly advise that 90% of the use of `Boolean`s is incorrect, and could be\nreplaced by more informative types.\n","date":"August 23, 2023","tags":["boolean"," denotational design"," correctness"],"title":"Boolean Considered Harmful","slug":"boolHarmful","description":"Most uses of Boolean are wrong","image":"/images/babBools.png"}]},"__N_SSG":true}