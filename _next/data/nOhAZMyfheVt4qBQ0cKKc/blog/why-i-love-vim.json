{"pageProps":{"blog":{"content":"\n\nThe text editor VIM is possibly one of my favourite tools for developing and coding. Whenever I have the opportunity to use vim, from VS code to Overleaf, and even google docs, I take it. I just want more people to learn and use VIM because of what an enjoyable tool is\n\n# Macros\nMany people often waste time slaving away at menial and boring text editing tasks. Vim makes relative tasks and actions easy using macros, or repeatable sets of keystrokes. \n\n\n# Speed\nIt's no doubt that with all the keybindings, getting from one location in the text to another is usually only a few keypresses. Typing is far faster than using a mouse. I have no doubt that my coding speed has increased twofold due to Vim.\n\n\n# Efficiency\nOften when I realise I have not completed the most keystroke efficient algorithm in VIM, I undo all my changes to try again. There is something immensely satisfying about executing the proper algorithm in VIM which I strive for every time I code. \n","date":"April 12, 2021","tags":["vim"],"title":"Why I love VIM","slug":"why-i-love-vim","description":"Vim is arguable the best text editor","image":"/images/vim.png"},"reccomendedBlog":[{"content":"\n\nSince haskell is a list-based language, there are many ways to work with lists. This article details some of the most interesting ways to multiply each number in a list by 5. \n1. The Imperative way\n```haskell,\nmain:: IO()\nmain = do\n  mutable <- M.replicate 256 1\n  forM_ ([1..256] z->\n    modify mutable (x->x*5) z\n   )\n```\n2. The boring way\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs = map (\\x->x*5) xs\n```\n3. currying\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList = map (*5) \n```\n4. monad\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs =  xs >>= (\\x -> [x*5])\n```\n5. short functor\n```haskell,\nm=(<$>)(*5)\n```\n6. List comprehension\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs = [x*5 | x <- xs]\n```\n\n\n7. Do notation\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs = do\n    x <- xs\n    return $ x*5\n```\n\n8. Functor\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs = fmap (\\x -> x*5) xs\n```\n9. Applicative\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs =  pure (\\x->x*5) <*> xs\n```\n10. Recursion\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList [] = []\nmultiplyList (x:xs) = (x*5) : multiplyList xs\n```\n\n\n\n\n\n","date":"May 2, 2021","tags":["haskell"," list"," map"," functor"],"title":"10 ways to map a list in haskell","slug":"10-ways-to-map-a-list","description":"Haskell is such a cool language","image":"/images/techs/haskell.png"},{"content":"\nSandeep Srinivasan is a veteran of the machine learning industry. While most have gravitated towards it since the hype of the late 2000s, Srinivasan claims he has been “interested in machine learning since the 1990s,” almost noachian in this quickly evolving field. Today, I sat down with Srinivasan in order to glean what insights he has after pioneering this industry for 30 years. \n\nI am struck by Srinivasan’s positive attitude. He himself concurs, saying its necessary to be “a lifelong learner” to succeed in this field. Even with his experience, he is “still taking courses” to learn new skills and improve himself. His optimism extends further, however. When describing how he first got into machine learning, Srinivasan said a professor was too embarrassed that no one signed up for his course in machine learning, so he paid Srinivasan $10 an hour to be the only attendant. Despite being happenstance, Srinivasan tells the story with a smile as if it is a good joke. He brings this sense of optimism to his work, summarizing that the “best part of [his] job” is to meet bright 20-year-olds who have a “beginner’s mindset” and are eager to learn. \n\nFinding these bright 20-year-olds is becoming increasingly difficult for Srinivasan, unfortunately. In this white-hot field, he must muscle his way through the likes of “Google, Facebook, Amazon, and Apple.” Due to this drive for talent, Srinivasan complains that “the hardest part” of his job is hiring for his small machine learning startup.\n\nDespite his recruiting woes, Srinivasan claims he is not deterred about founding a small machine learning startup. He says the experience has been rewarding for him. When speaking on the advantages of founding a startup, he says he gets to “eat [his] own dog food,” in the sense that he is excited to try out all the products as a consumer that he is inventing. He emphasize that a founder must act as the first customer of a product, because if the founder doesn’t believe in the product, then neither will the clients. \n\nThe main area where Srinivasan eagerly gets to try out his new inventions is with his products aiming to “simplify machine learning.” He uses his own online dashboard to set up machine learning models in a few clicks, and soon he hopes others can do the same. His mission is to “democratize machine learning for multiple applications.”  In the future, Srinivasan imagines that doctors or other domain experts could create machine learning models without coding and without technical knowledge. \n\t\nDoctors are not the only profession Srinivasan predicts machine learning will impact. He thinks that many “repetitive tasks” such as “data entry” for taxes will disappear. In addition, manual tasks, such as image labeling will be automated away by machine learning.\n\nOverall, I am very impressed with Srinivasan’s accomplishments. He certainly has the air of someone well-informed on the industry, and he was able to use his knowledge to give me personal advice for the job market (“learn statistics”). Given how he effuses knowledge in every aspect of machine learning, I would not be surprised if his startup goes far. This experience was very informative for me, and I see myself possibly having a career in machine learning. I suggest to the reader to conduct a similar informational interview, in the hopes that one could learn about an intriguing field from a personality. \n\n\n \n","date":"Feb 27, 2022","tags":["machine learning"," interview"," coding"],"title":"Interview with Machine Learning Expert","slug":"sandeep-interview","description":"After his 30 years in the field, machine learning engineer Sandeep Srinivasan offers advice on how to tackle this complex career.","image":"/images/sandeep.jpg"},{"content":"\n\n# My Site\nAs I have created a personal site (you're looking at it right now), I feel somewhat\nqualified to give advice to others on the best way of creating a personal site. Of course,\nif you are not impressed by my personal site, feel free not to take my advice.\n\n\nSpecifically, I think I will not give the standard or obvious advice, but rather\nI will give the advice that some people need to hear, but would rather not.\n\n# Fast and Functional\n\nThis might be a personal gripe of mine, but I would caution against using website creators\nsuch as Wix or Wordpress. They just create bloat on a site that really doesn't need it.\nWhen I go to such sites, it takes forever to load because of all the javascript bundles and\ntrackers. Really, if you can be served by plain HTML, then use plain HTML. It will give\nyour users better performance and the site will load almost instantaneously. And this\nsame advice even goes for frameworks. Do you really need your technology stack\nturning into a 100 layer wedding cake just for a personal site? Many people use their\npersonal website as an excuse to try out the latest technology. I know elm/svelte/tailwind/\nwhatever might be hot right now, but sometimes the safest option is best.\n\n# Prioritze Ease-of-Use over Flashy Animations\n\nI see some portfolio websites that look like they were created as a challenge\nto use every single animation avaible in CSS. But really, all animations do is\nslow down the user. If I have to wait 300ms for this flashy animation to complete,\nthen I feel like my flow has been interrupted on this site. I want the technology\nto get in my way as little as possible. Sure, some people take animations\nas an opportunity to show off, but if you must, put the animation in a place\nwhere it doesn't interrupt the flow of the site. Also, keep the animations small\nand less that 200ms. That way, your users will not be foaming at the mouth in\nrage at this mound of useless animations.\n\n# Create Lots of Content\n\nThis advice might seem obvious, but I think it merits repeating. Creating a wealth of\ncontent has a two-fold benefit\n\n* As you write more, you will become better at writing\n\n* By writing more, you will appear higher in search engines as more people click on\nyour site.\n\nHonestly, this is why I think starting a blog is a good idea for most personal sites. \nOf course the market is over-saturated (anyone is capable of starting a blog),\nyet you can always distinguish yourself by putting in extra efforts such as writing\nlong articles\n\n\n# Takeaway\n\nI hope I have given some unconventional advice on how to start a personal site. If\nyou want to hear more about this topic, feel free to [contact me](/contact).","date":"April 7, 2022","tags":["personal site"," html"," react"," blog"," markdown blog"],"title":"Tips for Creating a Personal Site","slug":"create-personal-site","description":"If you are thinking about creating a personal site, I have advice","image":"/images/personal-identity.jpg"}]},"__N_SSG":true}