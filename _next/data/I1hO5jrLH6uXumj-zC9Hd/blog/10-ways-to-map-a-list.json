{"pageProps":{"blog":{"content":"\n\nSince haskell is a list-based language, there are many ways to work with lists. This article details some of the most interesting ways to multiply each number in a list by 5. \n1. The Imperative way\n```haskell,\nmain:: IO()\nmain = do\n  mutable <- M.replicate 256 1\n  forM_ ([1..256] z->\n    modify mutable (x->x*5) z\n   )\n```\n2. The boring way\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs = map (\\x->x*5) xs\n```\n3. currying\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList = map (*5) \n```\n4. monad\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs =  xs >>= (\\x -> [x*5])\n```\n5. short functor\n```haskell,\nm=(<$>)(*5)\n```\n6. List comprehension\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs = [x*5 | x <- xs]\n```\n\n\n7. Do notation\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs = do\n    x <- xs\n    return $ x*5\n```\n\n8. Functor\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs = fmap (\\x -> x*5) xs\n```\n9. Applicative\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList xs =  pure (\\x->x*5) <*> xs\n```\n10. Recursion\n```haskell,\nmultiplyList :: [Int] -> [Int]\nmultiplyList [] = []\nmultiplyList (x:xs) = (x*5) : multiplyList xs\n```\n\n\n\n\n\n","date":"May 2, 2021","tags":["haskell"," list"," map"," functor"],"title":"10 ways to map a list in haskell","slug":"10-ways-to-map-a-list","description":"Haskell is such a cool language","image":"/images/techs/haskell.png"},"reccomendedBlog":[{"content":"\n\nI just recently got back from attending the [Ross Mathematics Program](https://rossprogram.org/) in Ohio and\nI would like to give a review. I came back from the airport giddy with excitement, and I wish that\nthe Ross Program could go for another week to distract me from school.\n\n## The Math\n\nOn the Ross Website, it makes it seem like you will do nothing but math for 6 weeks, and I can say that \nthe Ross Program is exactly as advertised. You will get 6 weeks of mathematics. The main curriculum in\nnumber theory was very interesting, and gave me a deeper appreciation of the integers. You may think\nthat proving that if a is divisible by b, then b < a might be a trivial task, but  at the Ross Program,\nwe go **FULL RIGOR**, meaning that every proposition must be directly from the axioms with minimal\ninference or hand waving (the student's response: \"full rigor leads to rigor mortis\"). All the problem\nsets have interesting problems that test your conceptions of numbers. \n\n## The Counsellors\nAll the counsellors at the Ross Program are excited to help you with math and discuss any math topic (Shoutout to Jon!). Just say \"I have a math problem\" and 10 heads will snap in your direction. Problem sets are\ngraded daily by the counsellors. Being in a 4-person \"family\" with a consellor creates a sense\nof camaraderie, which is good because I arrived at Ross not knowing anyone.\n\n\n## Lectures\nSpecial lectures are given by the counsellors and professors from [OSU](https://www.osu.edu/). These are\nvery exciting and you do not want to miss them. They cover eclectic topics ranging from modular forms\nto computation theory. I made the mistake of missing out on Vitaly Berglesson's Pigeonhole lecture series in\nthe first week and I regret that I did not go. The lectures introduce you to new subjects and really broadened\nmy conception of what I thought math encompassed. My favourite talk might have been Oscar's talk on the [hyper-reals](https://en.wikipedia.org/wiki/Hyperreal_number)\n\n## The Community\nThe community was my favorite thing about Ross. It is one thing to solve interesting problems, but it\nis quite another to collaborate on problems with people who are just as obsessed with math. \nWe all sort of egged each other on to solve more problems and inspired each other. I feel\nthat the biggest advantage of the Ross Program is that **it prepares you for how life will be in\nuniversity**. I.E. in university, you will likely specialize in a subject and hang out with people\nin a similar major to discuss your shared passion. \n\n## The Food\nI'd rather not dwell on this subject for too long.\n\n\n## Tips\nIf you are going to the Ross Program, I have some tips for you.\n- learn how to use a washing machine before you go\n- bring some emergency food with you\n- **pro tip:** bring a sleeping bag because the dorm beds are unsatisfactory to say the least. If you bring \na sleeping bag, you will be able to sleep.\n- In a similar vein, bring ear-plugs, because there are some people in the next dorm over\nwho say up very late and you don't want to be kept awake\n- The Ross website may claim that you shouldn't bring phones/computers/board games/cards, but \nyou will probably be fine if you bring these things.\n\n\n## Should you go to Ross?\nIf you would like to do math for 10 hours a day, for 7 days a week, for 6 weeks straight, then apply \nto the Ross Program. I was a bit intimidated at first because I had never done that much math\nbefore, but I really liked the experience. ","date":"August 28, 2022","tags":["math"," math program"," Ross"," Ross program"],"title":"A Review of the Ross Program","slug":"ross","description":"I just attended the Ross Program","image":"/images/ross-logo.svg"},{"content":"\n\nThe text editor VIM is possibly one of my favourite tools for developing and coding. Whenever I have the opportunity to use vim, from VS code to Overleaf, and even google docs, I take it. I just want more people to learn and use VIM because of what an enjoyable tool is\n\n# Macros\nMany people often waste time slaving away at menial and boring text editing tasks. Vim makes relative tasks and actions easy using macros, or repeatable sets of keystrokes. \n\n\n# Speed\nIt's no doubt that with all the keybindings, getting from one location in the text to another is usually only a few keypresses. Typing is far faster than using a mouse. I have no doubt that my coding speed has increased twofold due to Vim.\n\n\n# Efficiency\nOften when I realise I have not completed the most keystroke efficient algorithm in VIM, I undo all my changes to try again. There is something immensely satisfying about executing the proper algorithm in VIM which I strive for every time I code. \n","date":"April 12, 2021","tags":["vim"],"title":"Why I love VIM","slug":"why-i-love-vim","description":"Vim is arguable the best text editor","image":"/images/vim.png"},{"content":"\nI have written this blog post to commemorate how my site has started today. I am especially excited as to how it turned out and I always wanted to make a personal site for myself to display my projects. I built this site using next JS and posting it on GitHub pages.I hope you take the time to look at my blog posts and projects which are on this site \n","date":"April 5, 2021","tags":["blog"," javascript"," github"],"title":"The Start of My Blog","slug":"start","description":"my first blog","image":"/images/start.jpg"}]},"__N_SSG":true}