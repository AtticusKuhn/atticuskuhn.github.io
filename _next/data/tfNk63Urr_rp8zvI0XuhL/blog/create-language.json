{"pageProps":{"blog":{"content":"\n\n\nI recently looked at [A Talk by Bob Martin](https://www.youtube.com/watch?v=P2yr-3F6PQo) in which\nhe says that we've \"basically discovered all the programming paradigms\". He says this due to his\nview that programming paradigms are just restrictions on what programmers can do, but I disagree.\nMy view is that **a good programming language is the minimal amount needed to add to a model\nof computation**. I will explain what I mean.\n\n## Models of Computation\nAccording to Wikipedia, a [Model of Computation](https://en.wikipedia.org/wiki/Model_of_computation) is\n\"a model which describes how an output of a mathematical function is computed given an input\".\nThere are a list of models of computation on the page, which include\n- Post machines\n- Pushdown automata\n- Register machines\n- Random-access machines\n- Turing machines\n- Decision tree model\n- Abstract rewriting systems\n- Combinatory logic\n- General recursive functions\n- Lambda calculus\n- Actor model\n- Cellular automaton\n- Interaction nets\n- Kahn process networks\n- Logic gates and digital circuits\n- Petri nets\n- Synchronous Data Flow\n\nAs you can see, there are many models of computation.\n## Minimal Addition\nWhat do I mean by \"minimal additon\". Well, a model of computation only describes mathematical functions, which are pure. We would like our programs to be able to interact with the outside world. This means\nsome abilities must be added to a model of computation in order to allow interaction. The gold\nstandard for this is [Haskell](https://en.wikipedia.org/wiki/Haskell), with its monadic model of computation. In a good language, effects should be modelled using some kind of language construct, such\nas Haskell's monads, but I think the construct will vary for each model of computation.\n\n## Examples of Well-Loved Languages\n\nI will show how the best-designed languages today are simply the minimal additions to already good\nmodels of computation.\n\n\n| Model of Computation| Language|\n|--------------------|----------|\n| Untyped Lambda Calculus | Lisp|\n| Typed Lambda Calculus | Haskell|\n| Predicate Logic | Prolog |\n| Rewriting System | Wolfram |\n| Actor Model | Smalltalk |\n| Interaction Nets | [Kind2](https://github.com/Kindelia/Kind2) |\n| Combinatory Logic | APL | \n\nHopefully you see that all the languages on the right column are widely admired for being well-designed.\nAnd what unifies them all? They are all strictly based on a model of computation.\n\nLet us discuss the example of Lisp. Lisp is the [minimal wrapper](https://news.ycombinator.com/item?id=29950782) on top of the untyped lambda calculus. It does not include any features\nbeyound unleashing the inherent power of the lambda calculus. This is the main difference\nbetween Smalltalk and Java. Both are based on the [Actor Model](https://en.wikipedia.org/wiki/Actor_model)\nbut Smalltalk sticks truthfully to its model of computation, while Java confusedly\nborrows concepts from other languages.\n\n## Turing Completeness\nDue to Turing Completeness, we can say that all models of computation are equally expressive.\nSo, it remains to be decided what model we should use. I think we should first choose a model\nthat is the best for our needs.\n\n## Good Models of Computation\nGiven all these models of computation, which should we chose as a basis for our languages?\nI think it comes down to 2 critera:\n- being simple\n- having nice properties\n\nFor the first point, I think the model should be very simple. I think the [SK Calculus](https://en.wikipedia.org/wiki/SKI_combinator_calculus) is very good in this regard, and it might be the simplest model\nof computation that I have ever seen. Turing Machines, although the most well-known example of\na model of computation, are actually very complex and hard to explain. \n\nFor the second point, I mean that the model has properties that make it easy to implement and\nfast to run on our given hardware. One model that is very promising is [Interaction Nets](https://en.wikipedia.org/wiki/Interaction_nets#Properties) because they have these properties\n\n- locality (only active pairs can be rewritten)\n- linearity (each interaction rule can be applied in constant time)\n- strong confluence \n\nThese properties would make an implementation very fast, so I encourage you to try writing\nan implementation.\n\n\n## Advice to Aspiring Language Designers\nIf you want to design a language, I have some advice for how to do it. The first step is to\nchoose a model of computation that has not yet been well-explored. For example, I would\nnot design a language based on lambda calculus because that space has already been perfected\nby Lisp and Haskell, and I would not design a langauge based on predicate logic because\nProlog already does a good job there. I would choose a model that has good properties (can\nbe executed quickly on hardware) and has not been explored by any other language. Right\nnow I think the field of Linear Logic doesn't have its own industry-strength programming\nlanguage. If you think you can design such a language, I would encourage you on.\n\n\n## Summary\nIn short, a programming language is nothing but an implentation of a model of computation.","date":"Oct 10, 2022","tags":["programming"," math"," computation"," lisp"],"title":"How to Create an Excellent Programming Lanugage","slug":"create-language","description":"I have come up with a method to design well-loved languages","image":"/images/lisp.png"},"reccomendedBlog":[{"content":"\n\n# Linux\n\nI recently began to experiment with trying Linux, a free and open source operating system. I am a supporter\nof open-source software because I believe that it gives us true control over what we do on our electronic\ndevices. \n\n# Nixos\n\nFor my first foray into the wild world of Linux, I decided to try Nixos because I think the philosophy\nof everything being in 1 config file is pretty interesting. \n\n\n# My Experience\n\nFor the first few days, I couldn't get the X11 server to start and I was stuck in the TTY. I eventually\nfigured out that it was an issue with Intel Graphics, so I fixed it.\n\nMy experience was a bit slow and clunky starting out, but eventually, I became faster after I'd learning\nall the tricks of the new software. I actually think I am faster and more efficient now because open-source\nsoftware tends to follow the Unix Philosophy of being modular and also has lots of modes and keybindings\nto speed things up. \n\n# Software I've used\n\nThe thing I like most about free software is that it seems such software gives ultimate control and\ncustomizability to the user. Here are the software packages that I am using right now, which I believe\ngrant the user ultimate control\n\n* Nixos\n* Emacs\n* Xmonad / Xmobar\n\nI'm looking for a new terminal to use. Right now I'm using Xterm, which isn't very good. If you have any\nrecommendations of terminals that I should try, you can contact me.\n\n\n# My Configuration\n\nIf you want to see what configuration and dotfiles I'm using, go to my github because I have posted\nmy dotfiles and configuration files there. \n\n","date":"January 1, 2023","tags":["linux"," computers"," free software"],"title":"My experience using Linux","slug":"linux","description":"I recently switched to using only Linux. See how it turned out!","image":"/images/nixos.jpg"},{"content":"\nI have written this blog post to commemorate how my site has started today. I am especially excited as to how it turned out and I always wanted to make a personal site for myself to display my projects. I built this site using next JS and posting it on GitHub pages.I hope you take the time to look at my blog posts and projects which are on this site \n","date":"April 5, 2021","tags":["blog"," javascript"," github"],"title":"The Start of My Blog","slug":"start","description":"my first blog","image":"/images/start.jpg"},{"content":"\n\nWith so many different programming languages and technologies available today, it can sometimes be confusing on which to choose for a new project. If I were given the choice, these are my top 4 favourite languages that I would use. \n\n\n\n# 4 Python\nI really like the syntax of python. The fact that it is indentation based and I don't have to deal with brackets makes the code look nice.\n\n\n# 3  PHP\nPHP is the kind of language which gets things done. I have always been interested in web development, and since PHP focuses almost exclusively on web development, I use it sometimes.\n\n\n# 2  Javascript\nAbove PHP, javascript is truly the language of the web. It is the only language to write  a full-stack application because it works on the front end and the back end.  From React to Node.js, there are many libraries, tools, and frameworks for Javascript. The extraordinary tooling makes it possible to do anything in javascript, and one will never have to switch languages if one chooses it.\n\n\n# 1  Haskell\nHaskell is my all time favourite language. It is type-safe and entirely functional. By learning Haskell, I have changed the way I think about programming. Haskell forces the programmer to learn about types and side effects in a way which no other language does. I will always try to use Haskell if I can in any context.\n","date":"April 12, 2021","tags":["python"," PHP"," javascript"," go"," java"," haskell"],"title":"My favourite Programming languages","slug":"fav-lang","description":"Programming languages are like tools, so you need the right tool for the job","image":"/images/php.png"}]},"__N_SSG":true}